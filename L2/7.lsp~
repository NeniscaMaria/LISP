(defun root (tree)
    (car tree)
)

(defun getLeftSubtree (tree nodes edges)
    (cond
        ((null tree) nil)
        ((= nodes (+ edges (cadr tree))) (list (car tree) (cadr tree)))
        (t (append (list (car tree) (cadr tree)) (getLeftSubtree (cddr tree) (+ 1 nodes) (+ (cadr tree) edges))))
    )
)

(defun left (tree)
    (getLeftSubtree (cddr tree) 0 0)
)

(defun getRightSubtree (tree nodes edges)
    (cond
        ((null tree) nil)
        ((= nodes (+ edges (cadr tree))) (cddr tree))
    )
)

(defun right (tree)
    (getRightSubtree (cddr tree) 0 0)
)

(defun getLevel (tree level element)
(cond
((null tree) 0)
( (and (atom (car tree)) (equal element (car tree))) level )
(t (+ (getLevel (left tree) (+ level 1) element) (getLevel (right tree) (+ level 1) element)))
)
)